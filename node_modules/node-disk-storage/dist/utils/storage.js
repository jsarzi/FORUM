/**
 * node-disk-storage
 * @author Copyright(c) 2021 by Restu wahyu saputra
 * MIT Licensed
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "is-any-type", "nds-core", "./compress", "./validator"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.keysItem = exports.clearItem = exports.removeItem = exports.getItem = exports.setItem = void 0;
    const is_any_type_1 = require("is-any-type");
    const nds_core_1 = require("nds-core");
    const compress_1 = require("./compress");
    const validator_1 = require("./validator");
    const storage = new nds_core_1.NDSCore();
    const setItem = (items, compress, options) => {
        if (is_any_type_1.assert.isBoolean(validator_1.propertyValidator(options))) {
            if (is_any_type_1.assert.isArray(items)) {
                if (is_any_type_1.assert.isUndefined(storage.match())) {
                    if (compress !== false) {
                        const zp = compress_1.zip(items);
                        const uz = compress_1.unzip(zp);
                        storage.set(uz);
                        return true;
                    }
                    else {
                        storage.set(items);
                        return true;
                    }
                }
                else {
                    if (compress !== false) {
                        const zp = compress_1.zip(items);
                        const uz = compress_1.unzip(zp);
                        storage.set(uz);
                        return true;
                    }
                    else {
                        storage.set(items);
                        return true;
                    }
                }
            }
            else {
                return undefined;
            }
        }
    };
    exports.setItem = setItem;
    const getItem = (key, compress, options) => {
        if (is_any_type_1.assert.isBoolean(validator_1.propertyValidator(options))) {
            const getItem = storage.get(key);
            if (!is_any_type_1.assert.isFunction(getItem) || !is_any_type_1.assert.isPromise(getItem) || !is_any_type_1.assert.isNull(getItem) || !is_any_type_1.assert.isUndefined(getItem)) {
                if (compress !== false) {
                    const zp = compress_1.zip(getItem);
                    const uz = compress_1.unzip(zp);
                    return uz;
                }
                else {
                    return getItem;
                }
            }
            else {
                return undefined;
            }
        }
    };
    exports.getItem = getItem;
    const removeItem = (key, options) => {
        if (is_any_type_1.assert.isBoolean(validator_1.propertyValidator(options))) {
            const removeItem = storage.remove(key);
            if (is_any_type_1.assert.isBoolean(removeItem)) {
                return removeItem;
            }
            else {
                return undefined;
            }
        }
    };
    exports.removeItem = removeItem;
    const clearItem = (options) => {
        if (is_any_type_1.assert.isBoolean(validator_1.propertyValidator(options))) {
            const clearItem = storage.clear();
            if (is_any_type_1.assert.isBoolean(clearItem)) {
                return clearItem;
            }
            else {
                return undefined;
            }
        }
    };
    exports.clearItem = clearItem;
    const keysItem = (compress, options) => {
        if (is_any_type_1.assert.isBoolean(validator_1.propertyValidator(options))) {
            const allKeysItem = storage.allKeys();
            if (is_any_type_1.assert.isArray(allKeysItem)) {
                if (compress !== false) {
                    const zp = compress_1.zip(exports.getItem);
                    const uz = compress_1.unzip(zp);
                    return uz;
                }
                else {
                    return allKeysItem;
                }
            }
            else {
                return [];
            }
        }
    };
    exports.keysItem = keysItem;
});
